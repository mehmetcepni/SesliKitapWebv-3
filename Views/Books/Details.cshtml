@using Microsoft.AspNetCore.Identity
@model SesliKitapWeb.Models.Book
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = Model.Title;
}

<div class="book-details-container">
    <div class="row">
        <div class="col-md-4">
            <div class="book-cover-container">
                <img src="@Model.CoverImageUrl" alt="@Model.Title">
            </div>
            @if (User.Identity?.IsAuthenticated == true)
            {
                <div class="mt-3">
                    <form asp-action="ToggleFavorite" method="post" class="d-inline">
                        <input type="hidden" name="bookId" value="@Model.Id" />
                        <button type="submit" class="btn btn-favorite">
                            <i class="bi bi-star-fill"></i> Favorilerime Ekle
                        </button>
                    </form>
                </div>
            }
        </div>
        <div class="col-md-8">
            <div class="book-info">
                <h1 class="book-title">@Model.Title</h1>
                <h4 class="book-author">@Model.Author</h4>
                <span class="book-category">@Model.Category</span>
                <p class="book-description">@Model.Description</p>
                
                <div class="story-content">
                    @Model.Content
                </div>
                
                <div class="reading-controls">
                    <div class="btn-group">
                        <button id="readAloud" class="btn btn-primary">
                            <i class="bi bi-volume-up"></i> Sesli Oku
                        </button>
                        <button id="pauseReading" class="btn btn-primary" style="display: none;">
                            <i class="bi bi-pause"></i> Duraklat
                        </button>
                        <button id="stopReading" class="btn btn-primary" style="display: none;">
                            <i class="bi bi-stop"></i> Durdur
                        </button>
                        <button id="markAsRead" class="btn btn-read">
                            <i class="bi bi-check2-circle"></i> Okundu
                        </button>
                    </div>
                    <span id="readConfirmation" class="text-success ms-2" style="display:none;">Kitap okundu olarak işaretlendi!</span>
                </div>

                @if (User.IsInRole("Admin"))
                {
                    <div class="mt-3">
                        <div class="btn-group">
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-edit">
                                <i class="bi bi-pencil"></i> Düzenle
                            </a>
                            <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-delete">
                                <i class="bi bi-trash"></i> Sil
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="comments-section">
        <h3>Yorumlar</h3>
        @if (User.Identity?.IsAuthenticated == true)
        {
            <div class="comment-form">
                <form asp-controller="Books" asp-action="AddReview" method="post" id="reviewForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="bookId" value="@Model.Id" />
                    <div class="form-group">
                        <textarea name="content" id="commentText" class="form-control" rows="3" 
                                  placeholder="Yorumunuzu yazın..."></textarea>
                        
                        @if (TempData["SpamWarning"] != null)
                        {
                            <div class="alert alert-danger mt-2">
                                <i class="bi bi-exclamation-triangle"></i> @TempData["SpamWarning"]
                            </div>
                        }
                        
                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger mt-2">
                                <i class="bi bi-exclamation-circle"></i> @TempData["ErrorMessage"]
                            </div>
                        }
                    </div>
                    <button type="submit" class="btn btn-comment mt-2">
                        <i class="bi bi-chat"></i> Yorum Yap
                    </button>
                </form>
            </div>
        }

        @if (Model.Reviews.Any())
        {
            foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
            {
                <div class="comment-card">
                    <div class="comment-header">
                        <span class="comment-user">@review.User?.UserName</span>
                        <span class="comment-date">@review.CreatedAt.ToString("dd.MM.yyyy HH:mm")</span>
                    </div>
                    <div class="comment-content">@review.Content
                        @if (!string.IsNullOrEmpty(review.Sentiment))
                        {
                            <span class="badge bg-info ms-2">@review.Sentiment</span>
                        }
                    </div>
                    @if (User.IsInRole("Admin") || review.UserId == User.Identity?.Name)
                    {
                        <div class="mt-2">
                            <form asp-controller="Reviews" asp-action="Delete" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@review.Id" />
                                <button type="submit" class="btn btn-delete">
                                    <i class="bi bi-trash"></i> Sil
                                </button>
                            </form>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <p class="text-muted">Henüz yorum yapılmamış.</p>
        }
    </div>
</div>

@section Scripts {
    <script>
        let speechSynthesis = window.speechSynthesis;
        let utterance = null;
        let currentWordIndex = -1;
        let words = [];

        function highlightWord(index) {
            if (currentWordIndex >= 0) {
                words[currentWordIndex].classList.remove('highlighted-word');
            }
            
            if (index >= 0 && index < words.length) {
                words[index].classList.add('highlighted-word');
                currentWordIndex = index;
                
                words[index].scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
            }
        }

        function prepareText() {
            const content = document.querySelector('.story-content');
            const text = content.textContent;
            
            content.innerHTML = '';
            
            words = text.split(/\s+/).map(word => {
                const span = document.createElement('span');
                span.textContent = word + ' ';
                span.className = 'word';
                return span;
            });
            
            words.forEach(word => content.appendChild(word));
        }

        document.getElementById('readAloud').addEventListener('click', function() {
            prepareText();
            const text = document.querySelector('.story-content').textContent;
            utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'tr-TR';
            
            utterance.rate = 1.0;
            utterance.pitch = 1.0;
            
            utterance.onboundary = function(event) {
                if (event.name === 'word') {
                    const wordIndex = Math.floor(event.charIndex / 6);
                    highlightWord(wordIndex);
                }
            };
            
            utterance.onend = function() {
                highlightWord(-1);
                document.getElementById('readAloud').style.display = 'inline-block';
                document.getElementById('stopReading').style.display = 'none';

                // Kitap tamamlandı bilgisini sunucuya gönder
                fetch('/Books/MarkAsCompleted', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ bookId: @Model.Id })
                });
            };
            
            speechSynthesis.speak(utterance);
            
            this.style.display = 'none';
            document.getElementById('stopReading').style.display = 'inline-block';
        });

        document.getElementById('stopReading').addEventListener('click', function() {
            speechSynthesis.cancel();
            highlightWord(-1);
            
            this.style.display = 'none';
            document.getElementById('readAloud').style.display = 'inline-block';
        });

        document.getElementById('markAsRead').addEventListener('click', function() {
            fetch('/Books/MarkAsCompleted', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({ bookId: @Model.Id })
            }).then(function(response) {
                if (response.ok) {
                    document.getElementById('readConfirmation').style.display = 'inline';
                }
            });
        });
    </script>
}

<style>
    .reading-controls {
        margin-bottom: 2rem;
    }

    .reading-controls .btn-group {
        margin-bottom: 1rem;
    }
</style>